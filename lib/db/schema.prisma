generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "tracing"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./types"
  modelSuffix           = "Model"
  prismaJsonNullability = "true"
  relationModel         = "default"
  useDecimalJs          = "false"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [tsm_system_rows, uuid_ossp(map: "uuid-ossp")]
}

model RoleMember {
  user_id Int
  role_id Int
  roles   Role @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  users   User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@map("role_members")
}

model RolePermission {
  role_id    Int
  permission String
  roles      Role   @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@id([role_id, permission])
  @@map("role_permissions")
}

model Role {
  role_id          Int              @id @default(autoincrement())
  name             String           @unique
  description      String           @default("")
  role_members     RoleMember[]
  role_permissions RolePermission[]

  @@map("roles")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model User {
  user_id                         Int          @id @default(autoincrement())
  email                           String       @unique
  first_name                      String
  last_name                       String
  nickname                        String       @default("")
  avatar                          String       @default("")
  joined_on                       DateTime     @default(now())
  identities                      Identity[]
  attendees                       Attendee[]
  crews                           Crew[]
  events_events_created_byTousers Event[]      @relation("events_created_byTousers")
  events_events_deleted_byTousers Event[]      @relation("events_deleted_byTousers")
  events_events_updated_byTousers Event[]      @relation("events_updated_byTousers")
  role_members                    RoleMember[]
  hosted_events                   Event[]      @relation("event_host_user")

  /// [UserPreferences]
  preferences Json @default("{}")

  @@map("users")
}

model Identity {
  identity_id  Int    @id @default(autoincrement())
  user_id      Int
  user         User   @relation(fields: [user_id], references: [user_id])
  provider     String
  provider_key String

  @@unique([provider, provider_key])
  @@unique([user_id, provider])
  @@map("identities")
}

model Attendee {
  event_id      Int
  user_id       Int
  attend_status String
  events        Event  @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  users         User   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([event_id, user_id])
  @@map("attendees")
}

model Crew {
  crew_id                 Int         @id @default(autoincrement())
  signup_id               Int
  position_id             Int
  user_id                 Int?
  custom_crew_member_name String?
  credited                Boolean     @default(true)
  locked                  Boolean     @default(false)
  ordering                Int
  positions               Position    @relation(fields: [position_id], references: [position_id], onDelete: Cascade)
  signup_sheets           SignupSheet @relation(fields: [signup_id], references: [signup_id], onDelete: Cascade)
  users                   User?       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("crews")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Event {
  event_id               Int                  @id @default(autoincrement())
  event_type             String               @default("other")
  name                   String
  start_date             DateTime             @db.Timestamptz(6)
  end_date               DateTime             @db.Timestamptz(6)
  description            String               @default("")
  location               String               @default("")
  is_private             Boolean              @default(false)
  is_cancelled           Boolean              @default(false)
  is_tentative           Boolean              @default(false)
  created_at             DateTime             @default(now()) @db.Timestamptz(6)
  created_by             Int
  updated_at             DateTime?            @db.Timestamptz(6)
  updated_by             Int?
  deleted_at             DateTime?            @db.Timestamptz(6)
  deleted_by             Int?
  host                   Int
  adam_rms_project_id    Int?
  slack_channel_id       String               @default("")
  check_with_tech_status CheckWithTechStatus?

  attendees       Attendee[]
  created_by_user User          @relation("events_created_byTousers", fields: [created_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  deleted_by_user User?         @relation("events_deleted_byTousers", fields: [deleted_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  updated_by_user User?         @relation("events_updated_byTousers", fields: [updated_by], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  host_user       User          @relation("event_host_user", fields: [host], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  signup_sheets   SignupSheet[]

  @@map("events")
}

enum CheckWithTechStatus {
  Requested
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Position {
  position_id       Int     @id @default(autoincrement())
  permission_id     Int?
  name              String
  admin             Boolean @default(false)
  brief_description String  @default("")
  full_description  String
  crews             Crew[]
  is_custom         Boolean @default(false)

  @@unique([name])
  @@map("positions")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model SignupSheet {
  signup_id    Int       @id @default(autoincrement())
  event_id     Int
  title        String
  description  String    @default("")
  unlock_date  DateTime? @db.Timestamptz(6)
  arrival_time DateTime  @db.Timestamptz(6)
  start_time   DateTime  @db.Timestamptz(6)
  end_time     DateTime  @db.Timestamptz(6)
  crews        Crew[]
  events       Event     @relation(fields: [event_id], references: [event_id], onDelete: Cascade, onUpdate: NoAction) // TODO singular

  @@map("signup_sheets")
}

model Quote {
  quote_id   Int       @id @default(autoincrement())
  text       String
  context    String    @default("")
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  created_by Int
  deleted_at DateTime? @db.Timestamptz(6)

  @@map("quotes")
}

model EquipmentListTemplate {
  equipment_list_template_id Int     @id @default(autoincrement())
  name                       String
  description                String  @default("")
  items                      String
  archived                   Boolean @default(false)

  @@map("equipment_list_templates")
}
